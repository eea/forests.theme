<tal:block tal:define="foo python:request.set('disable_plone.leftcolumn', 1);
        bar python:request.set('disable_plone.rightcolumn', 1);"/>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
         i18n:domain="plone.z3cform"
         metal:use-macro="context/main_template/macros/master">

<body>
<metal:css fill-slot="style_slot">
  <link type="text/css" rel="stylesheet" href="//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" />
    <style>
        #matrix_main_table th {
            transform: rotate(270deg);
            vertical-align: middle;
            line-height: 2;
        }

        #matrix_table {
            display: block;
            overflow: auto;
        }

        #matrix_table th:nth-of-type(4), #matrix_table td:nth-of-type(4) {
            display: none;
        }
        #matrix_table th {
            min-width: 95px;
        }

        .js-filters {
            max-width: 300px;
            min-width: 250px;
        }
    </style>
</metal:css>

<metal:js fill-slot="javascript_head_slot">
  <script type="text/javascript" src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js">
  </script>
  <script>
        $(document).ready( function () {
            var $matrix_main_table = $('#matrix_main_table');
            var $matrix_filters = $("#matrix_filters");
            var $select_filters = $(".js-filters");
            var $from_select = $select_filters.eq(1);
            var $to_select = $select_filters.eq(2);
            var $matrix_table = $("#matrix_table");
            var active_datatable;

            $select_filters.select2({
                placeholder: 'Select an option'
            });

            $select_filters.on('change', function (e, data) {
                // avoid change logic when we clear data when clicking the original table link
                if (data) {
                    return;
                }

                // get all values from given selectors
                var $selects = $("select");
                var jsonFilters = {};
                $selects.each(function(idx, el) {
                    var values = $(el).val();
                    if (values) {
                        jsonFilters[el.name] = values;
                    }
                });

                // ajax query for new data will just populate the datatable rows
                $.getJSON("queryMatrixData", jsonFilters).done(function(data) {
                    var values = data['data'] || [];
                    active_datatable.clear().rows.add(values).draw();
                });

            });

            $matrix_main_table.find('td').click(function(ev) {
              var td = ev.target;
              var $row = $(ev.target).closest('tr');
              var $tds = $row.find('td');
              var num;

              $tds.each(function(idx, el) {
                if (el === td) {
                    num = idx;
                    return true;
                }
              });

              // find out which row and column value we've clicked on
              var thead = $matrix_main_table.find('th').eq(num);
              var from = $tds.eq(0).text();
              var to = thead.text();

              // change value of hidden selectors to the value we just clicked
              $from_select.val(from).trigger('change', {table_search: true});
              $to_select.val(to).trigger('change', {table_search: true});

              $.getJSON("queryMatrixData", {
                  From: [from],
                  To: [to]
              }).done(function(data) {
                  var headers, columns;
                  $matrix_main_table.hide();
                  $matrix_filters.removeClass('hidden');

                  if (!$matrix_table.hasClass('dataTable')) {
                    // initial datatable creation with columns and rows
                    headers = data['columnDefs'];
                    columns = [];

                    for(var header in headers) {
                        columns.push({ title: headers[header]});
                    }

                    active_datatable = $matrix_table.DataTable({
                          'columns':columns,
                          data: data['data'],
                          "lengthChange": false,
                          "searching": false,
                          "pageLength":22
                    });
                  }
                  else {
                      // replace just the rows in case we already created the datatable
                      active_datatable.clear().rows.add(data['data']).draw();
                  }
                  
                  $("#matrix_table_wrapper").show();
              });


            });

            $(".main_table_link").click(function(ev) {
                // hide non filter table and empty filtered table
                ev.preventDefault();
                $("#matrix_table_wrapper").hide();
                $matrix_filters.addClass('hidden');
                $matrix_main_table.show();
                $select_filters.select2('data', null);
            });
        });
  </script>
</metal:js>

<metal:content metal:fill-slot="content-title">
    <h1 class="documentFirstHeading">Land use reporting</h1>
</metal:content>
<metal:content metal:fill-slot="content">

    <div class="matrix-content clearfix"
        tal:define="tview nocall:context/queryMatrixData; data tview/get_table_data">
        <h2>TABLE 4.1 LAND TRANSITION MATRIX</h2>
        <h3>Areas and changes in areas between the previous and the current inventory year</h3>
        <a href="#" class="main_table_link">Original table</a>
        <div id="matrix_filters" class="hidden" tal:define="filter_dict tview/get_table_filters; keys filter_dict/keys; values filter_dict/values">
            <h3>Filter by</h3>
            <tal:rows tal:repeat="rows filter_dict">
                <label tal:attributes="for string:js-${rows}" tal:content="rows">From</label>
                <select class="js-from" tal:attributes="name string:${rows}; class string:js-${rows} js-filters" multiple="multiple">
                <tal:row tal:repeat="row python:values[repeat['rows'].index]">
                    <option tal:content="row" tal:attributes="value row">Alabama</option>
                </tal:row>
                </select>
            </tal:rows>
        </div>
        <table id="matrix_table"></table>
        <table class="table table-responsive table-striped" id="matrix_main_table">
                <thead>
                <tal:rows tal:repeat="rows data">
                    <tr tal:condition="python:repeat['rows'].index == 0">
                        <th tal:repeat="item rows" tal:content="item">Heading name</th>
                    </tr>
                </tal:rows>
                </thead>
                    
                <tbody> 
                    <tal:rows tal:repeat="rows data">
                    <tr tal:condition="python:repeat['rows'].index != 0">
                        <td tal:repeat="item rows" tal:content="item">Column name</td>
                    </tr>
                    </tal:rows>
                </tbody>
            
        </table>
    </div>

</metal:content>

</body>
</html>
